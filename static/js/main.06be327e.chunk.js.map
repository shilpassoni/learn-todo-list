{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","disabled","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.06be327e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n    render() {\r\n       const{item, handleChange, handleSubmit, editItem } = this.props; \r\n        return ( \r\n          <div className=\"card card-body my-3\">\r\n           <form onSubmit={handleSubmit}>\r\n               <div className=\"input-group\">\r\n                   <div className=\"input-group-prepend\">\r\n                     <div className=\"input-group-text bg-primary text-white\">\r\n                        <i className=\"fas fa-book\"/> \r\n                     </div>   \r\n                   </div>\r\n                   <input \r\n                     type=\"text\" \r\n                     className=\"form-control text-capitalize\" \r\n                     placeholder=\"add a todo item\"\r\n                     value={item}\r\n                     onChange={handleChange}\r\n                   />\r\n               </div>\r\n               <button\r\n            type=\"submit\"\r\n            disabled={item ? false : true}\r\n            className={\r\n              editItem\r\n                ? \"btn btn-block btn-success mt-3 text-uppercase\"\r\n                : \"btn btn-block btn-primary mt-3 text-uppercase\"\r\n            }\r\n          >\r\n            {editItem ? \"edit item\" : \"add item\"}\r\n          </button>\r\n           </form>\r\n        </div>\r\n      ); \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoItem extends Component {\r\n    render() {\r\n      \r\n            const { title, handleDelete, handleEdit } = this.props;\r\n            \r\n            return (\r\n              <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n                <h6>{title}</h6>\r\n                <div className=\"todo-icon\">\r\n                  <span className=\"mx-2 text-success\" onClick={handleEdit}>\r\n                      <i className=\"fas fa-pen\"></i>\r\n                  </span>\r\n                  <span className=\"mx-2 text-danger\" onClick={handleDelete}>\r\n                      <i className=\"fas fa-trash\"></i>\r\n                  </span>  \r\n\r\n                </div>\r\n\r\n            </li>\r\n        );   \r\n    \r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nexport default class TodoList extends Component {\r\n    render() {\r\n        const { items, clearList, handleDelete, handleEdit } = this.props;\r\n        return (\r\n           <ul className=\"list-group-my-5\">\r\n             <h3 className=\"text-capitalize text-center\">todo list</h3>  \r\n             {items.map(item => { \r\n               return(\r\n                 <TodoItem\r\n                 key={item.id}\r\n                 title={item.title}\r\n                 handleDelete={() => handleDelete(item.id)}\r\n                 handleEdit={() => handleEdit(item.id)}\r\n               />\r\n               );\r\n             })} \r\n             <button type=\"button\" className=\"btn btn-danger btn-block text-uppercase mt-5\" onClick={clearList}>Clear List</button>\r\n           </ul>\r\n        )\r\n        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './logo.svg';\nimport { uuid } from 'uuidv4';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\nexport default class App extends Component {\n  state={\n    items: [],\n    id:uuid(), \n    item: \"\",\n    editItem: false \n  };\n  handleChange = (e) => {\n     this.setState({\n       item: e.target.value\n     });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    \n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    };\n\n    const updatedItems = [...this.state.items, newItem];\n    \n    this.setState({\n      items: updatedItems,\n      item: \"\",\n      id: uuid(),\n      editItem: false\n    });\n  };\n\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n  };\n\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    this.setState({\n      items: filteredItems\n    });\n  };\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    const selectedItem = this.state.items.find(item => item.id === id);\n    \n    console.log(selectedItem);\n\n    this.setState({\n      items:filteredItems,\n      item:selectedItem.title,\n      id:id,\n      editItem:true\n    });\n  };\n\n  render() {\n    return (\n      <div>\n       <div className=\"container\">\n         <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-5\">\n          <h3 className=\"text-capitalize text-center\">\n            todo input\n          </h3>  \n           <TodoInput \n              item={this.state.item} \n              handleChange={this.handleChange} \n              handleSubmit={this.handleSubmit}\n              editItem = {this.state.editItem}\n            />\n           <TodoList \n             items={this.state.items}\n             clearList={this.clearList}\n             handleDelete={this.handleDelete}\n             handleEdit={this.handleEdit}/>\n           </div>\n         </div>\n       </div>        \n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}